{"version":3,"sources":["routing-configuration.js"],"names":[],"mappings":";;;;;AAAA,SAAS,aAAa,CAAC,oBAAoB,EAAE;AACzC,wBAAoB,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,aAAa,EAAE,aAAa,EAAE,UAAU,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE;AACnH,eAAO,MAAM,CACR,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CACvB,IAAI,CAAC,UAAA,YAAY,EAAI;AAClB,gBAAI,WAAW,CAAC,QAAQ,EAAE;AACtB,2BAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,IAAI;2BAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;iBAAA,CAAC,CAAC;aAC7D;;AAED,mBAAO,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC;SAC7F;;AAAC,SAED,IAAI,CAAC;mBAAM,IAAI;SAAA,CAAC,CAChB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;KAC3C,CAAC,CAAC,CAAC;CACP;;kBAEc,CACX,sBAAsB,EACtB,aAAa,CAChB","file":"routing-configuration.js","sourcesContent":["function routingConfig($futureStateProvider) {\n    $futureStateProvider.stateFactory('load', ['$q', '$ocLazyLoad', 'futureState', function ($q, $ocLazyLoad, futureState) {\n        return System\n            .import(futureState.src)\n            .then(loadedModule => {\n                if (futureState.prefetch) {\n                    futureState.prefetch.forEach(path => System.import(path));\n                }\n\n                return $ocLazyLoad.inject(loadedModule.name || loadedModule.default.name || loadedModule);\n            })\n            // this needs to be done so that the future state handler doesn't use the component name as state name\n            .then(() => null)\n            .catch(console.error.bind(console));\n    }]);\n}\n\nexport default [\n    '$futureStateProvider',\n    routingConfig\n];\n"],"sourceRoot":"/source/"}