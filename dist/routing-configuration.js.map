{"version":3,"sources":["routing-configuration.js"],"names":[],"mappings":";;;;;AAAA,SAAS,aAAT,CAAuB,oBAAvB,EAA6C;AACzC,yBAAqB,YAArB,CAAkC,MAAlC,EAA0C,CAAC,IAAD,EAAO,aAAP,EAAsB,aAAtB,EAAqC,UAAU,EAAV,EAAc,WAAd,EAA2B,WAA3B,EAAwC;AACnH,eAAO,OACF,MADE,CACK,YAAY,GADjB,EAEF,IAFE,CAEG,wBAAgB;AAClB,gBAAI,YAAY,QAAhB,EAA0B;AACtB,4BAAY,QAAZ,CAAqB,OAArB,CAA6B;AAAA,2BAAQ,OAAO,MAAP,CAAc,IAAd,CAAR;AAAA,iBAA7B;AACH;;AAED,mBAAO,YAAY,MAAZ,CAAmB,aAAa,IAAb,IAAqB,aAAa,OAAb,CAAqB,IAA1C,IAAkD,YAArE,CAAP;AACH,SARE;;AAAA,SAUF,IAVE,CAUG;AAAA,mBAAM,IAAN;AAAA,SAVH,EAWF,KAXE,CAWI,QAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAXJ,CAAP;AAYH,KAbyC,CAA1C;AAcH;;kBAEc,CACX,sBADW,EAEX,aAFW,C","file":"routing-configuration.js","sourcesContent":["function routingConfig($futureStateProvider) {\n    $futureStateProvider.stateFactory('load', ['$q', '$ocLazyLoad', 'futureState', function ($q, $ocLazyLoad, futureState) {\n        return System\n            .import(futureState.src)\n            .then(loadedModule => {\n                if (futureState.prefetch) {\n                    futureState.prefetch.forEach(path => System.import(path));\n                }\n\n                return $ocLazyLoad.inject(loadedModule.name || loadedModule.default.name || loadedModule);\n            })\n            // this needs to be done so that the future state handler doesn't use the component name as state name\n            .then(() => null)\n            .catch(console.error.bind(console));\n    }]);\n}\n\nexport default [\n    '$futureStateProvider',\n    routingConfig\n];\n"],"sourceRoot":"/source/"}