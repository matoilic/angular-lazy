{"version":3,"sources":["component-loader-service.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAGM,sBAAsB;;;;;;;;;AAQxB,aARE,sBAAsB,CAQZ,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE;8BAR9C,sBAAsB;;AASpB,YAAI,CAAC,GAAG,GAAG,EAAE,CAAC;AACd,YAAI,CAAC,YAAY,GAAG,WAAW,CAAC;AAChC,YAAI,CAAC,UAAU,GAAG,SAAS,CAAC;AAC5B,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACzB;;;;;;;;;AAAA;iBAbC,sBAAsB;;sCAsBV,aAAa,EAAE;;;AACzB,gBAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;AAC3C,uBAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,GAAG,aAAa,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,eAAe,EAAI;AACzF,wBAAM,aAAa,GAAG,eAAe,CAAC,IAAI,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,IAAI,eAAe,CAAC;;AAE9F,2BAAO,MAAK,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;iBAClD,CAAC,CAAC;aACN;;AAED,mBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACpC;;;;;;;;;;;;;gCAUO,aAAa,EAAE,UAAU,EAAE;;;AAC/B,mBAAO,IAAI,CACN,aAAa,CAAC,aAAa,CAAC,CAC5B,IAAI,CAAC;uBAAM,OAAK,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC;aAAA,CAAC,CAAC;SACpD;;;WA9CC,sBAAsB;;;kBAiDb,CACX,IAAI,EACJ,aAAa,EACb,WAAW,EACX,QAAQ,EACR,sBAAsB,CACzB","file":"component-loader-service.js","sourcesContent":["/**\n * Provides functionality to load components at runtime.\n */\nclass ComponentLoaderService {\n    /**\n     *\n     * @param $q\n     * @param $ocLazyLoad\n     * @param $injector\n     * @param system\n     */\n    constructor($q, $ocLazyLoad, $injector, system) {\n        this._$q = $q;\n        this._$ocLazyLoad = $ocLazyLoad;\n        this._$injector = $injector;\n        this._system = system;\n    }\n\n    /**\n     * Loads a component with the given name. It will automatically look for the component in the components folder.\n     * E.g. if you pass `popup` it will try to load the component from \"components/popup/index\".\n     *\n     * @param {String} componentName\n     * @returns {Promise}\n     */\n    loadComponent(componentName) {\n        if(!this._$ocLazyLoad.isLoaded(componentName)) {\n            return this._system.import('components/' + componentName + '/index').then(loadedComponent => {\n                const componentName = loadedComponent.name || loadedComponent.default.name || loadedComponent;\n                \n                return this._$ocLazyLoad.inject(componentName);\n            });\n        }\n\n        return this._$q.when(moduleName);\n    }\n\n    /**\n     * Resolves an Angular injectable, e.g. service or constant, from the given component. If ensures that the component\n     * is loaded before trying to resolve the injectable.\n     *\n     * @param {String} componentName\n     * @param {String} identifier\n     * @returns {Promise}\n     */\n    resolve(componentName, identifier) {\n        return this\n            .loadComponent(componentName)\n            .then(() => this._$injector.get(identifier));\n    }\n}\n\nexport default [\n    '$q',\n    '$ocLazyLoad',\n    '$injector',\n    'system',\n    ComponentLoaderService\n];\n"],"sourceRoot":"/source/"}