{"version":3,"sources":["component-loader-service.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAGM,sB;;;;;;;;;AAQF,oCAAY,EAAZ,EAAgB,WAAhB,EAA6B,SAA7B,EAAwC,MAAxC,EAAgD;AAAA;;AAC5C,aAAK,GAAL,GAAW,EAAX;AACA,aAAK,YAAL,GAAoB,WAApB;AACA,aAAK,UAAL,GAAkB,SAAlB;AACA,aAAK,OAAL,GAAe,MAAf;AACH;;;;;;;;;;;;;sCASa,a,EAAe;AAAA;;AACzB,gBAAG,CAAC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,aAA3B,CAAJ,EAA+C;AAC3C,uBAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,gBAAgB,aAAhB,GAAgC,QAApD,EAA8D,IAA9D,CAAmE,2BAAmB;AACzF,wBAAM,gBAAgB,gBAAgB,IAAhB,IAAwB,gBAAgB,OAAhB,CAAwB,IAAhD,IAAwD,eAA9E;;AAEA,2BAAO,MAAK,YAAL,CAAkB,MAAlB,CAAyB,aAAzB,CAAP;AACH,iBAJM,CAAP;AAKH;;AAED,mBAAO,KAAK,GAAL,CAAS,IAAT,CAAc,UAAd,CAAP;AACH;;;;;;;;;;;;;gCAUO,a,EAAe,U,EAAY;AAAA;;AAC/B,mBAAO,KACF,aADE,CACY,aADZ,EAEF,IAFE,CAEG;AAAA,uBAAM,OAAK,UAAL,CAAgB,GAAhB,CAAoB,UAApB,CAAN;AAAA,aAFH,CAAP;AAGH;;;;;;kBAGU,CACX,IADW,EAEX,aAFW,EAGX,WAHW,EAIX,QAJW,EAKX,sBALW,C","file":"component-loader-service.js","sourcesContent":["/**\n * Provides functionality to load components at runtime.\n */\nclass ComponentLoaderService {\n    /**\n     *\n     * @param $q\n     * @param $ocLazyLoad\n     * @param $injector\n     * @param system\n     */\n    constructor($q, $ocLazyLoad, $injector, system) {\n        this._$q = $q;\n        this._$ocLazyLoad = $ocLazyLoad;\n        this._$injector = $injector;\n        this._system = system;\n    }\n\n    /**\n     * Loads a component with the given name. It will automatically look for the component in the components folder.\n     * E.g. if you pass `popup` it will try to load the component from \"components/popup/index\".\n     *\n     * @param {String} componentName\n     * @returns {Promise}\n     */\n    loadComponent(componentName) {\n        if(!this._$ocLazyLoad.isLoaded(componentName)) {\n            return this._system.import('components/' + componentName + '/index').then(loadedComponent => {\n                const componentName = loadedComponent.name || loadedComponent.default.name || loadedComponent;\n                \n                return this._$ocLazyLoad.inject(componentName);\n            });\n        }\n\n        return this._$q.when(moduleName);\n    }\n\n    /**\n     * Resolves an Angular injectable, e.g. service or constant, from the given component. If ensures that the component\n     * is loaded before trying to resolve the injectable.\n     *\n     * @param {String} componentName\n     * @param {String} identifier\n     * @returns {Promise}\n     */\n    resolve(componentName, identifier) {\n        return this\n            .loadComponent(componentName)\n            .then(() => this._$injector.get(identifier));\n    }\n}\n\nexport default [\n    '$q',\n    '$ocLazyLoad',\n    '$injector',\n    'system',\n    ComponentLoaderService\n];\n"],"sourceRoot":"/source/"}